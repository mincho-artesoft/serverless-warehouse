service: serverless-warehouse

useDotenv: true

plugins:
  - serverless-offline
  - serverless-esbuild

provider:
  name: aws
  memorySize: 2048
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1
  environment:
    REGION: ${env:REGION}
    APP_ENV: ${env:APP_ENV}
    MONGODB_URL: ${env:MONGODB_URL}
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    GOOGLE_SECRET: ${env:GOOGLE_SECRET}
    FACEBOOK_APP_ID: ${env:FACEBOOK_APP_ID}
    FACEBOOK_APP_ID_APP_SECRET: ${env:FACEBOOK_APP_ID_APP_SECRET}

  iam:
    role:
      statements:   # Add this section to provide necessary permissions
        - Effect: "Allow"
          Action:
            - "dynamodb:*"  # This allows all DynamoDB actions
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/*"  # This allows all DynamoDB tables in the account

functions:
  http:
    handler: src/app/serverless/http.handler
    events:
      - httpApi:
          method: '*'
          path: /api/warehouse/{proxy+}

custom:
  serverless-offline:
    timeout: 60
    httpPort: ${env:HTTP_PORT}
  esbuild:
    tsconfig: './tsconfig.app.json'
    bundle: true
    minify: false
    target: es2022
    sourcemap: true
    sourcesContent: false
    define: {'require.resolve': undefined}
    plugins: './esbuildPlugins.js'
    external:
      - 'ws'
      - 'class-transformer/storage'
      - '@nestjs/microservices'
      - '@nestjs/microservices/microservices-module'

package:
  excludeDevDependencies: true
